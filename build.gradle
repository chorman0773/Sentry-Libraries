import java.time.Instant

plugins {
    id 'maven-publish'
    id 'org.javamodularity.moduleplugin' version '1.6.0' apply false
}

subprojects{
    apply plugin: 'java'
    apply plugin: 'org.javamodularity.moduleplugin'
    sourceCompatibility = targetCompatibility = 15
    repositories {
        mavenLocal()
        maven {
            url = "https://lightningcreations.github.io/Maven"
            name = "Lightning Creations Maven"
        }
        jcenter()
        mavenCentral()
    }

    task sourceJar(type: Jar){
        from sourceSets.main.allJava
        archiveClassifier = "sources"
    }

    task javadocJar(type: Jar){
        from javadoc
        archiveClassifier = "javadoc"
    }
    afterEvaluate { Project project ->
        publishing {
            publications {
                "${project.name}"(MavenPublication) {
                    from components.java
                    artifact sourceJar
                    artifact javadocJar
                    artifactId = project.archivesBaseName
                    version = project.version
                }
                "${project.name}Snapshot"(MavenPublication) {
                    from components.java
                    artifact sourceJar
                    artifact javadocJar
                    artifactId = project.archivesBaseName
                    version = project.version + "-SNAPSHOT-" + Instant.now().toString()
                }
            }
        }
    }
}

group 'github.chorman0773.sentry'
version '1.1'


repositories {
    mavenLocal()
    maven {
        url = "https://lightningcreations.github.io/Maven"
        name = "Lightning Creations Maven"
    }
    jcenter()
    mavenCentral()
}

publishing {
    repositories {
        maven {
            def home = System.getProperty("user.home")
            url = "$home/Maven"
            name = "LightningCreations"
        }
    }
}

task publishSnapshotsToLocal{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenLocal).matching {
        e->e.getName().contains("Snapshot")
    }
}

task publishSnapshots{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenRepository).matching{
        e->e.getName().contains("Snapshot")
    }
}

task publishReleasesToLocal{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenLocal).matching {
        e->!e.getName().contains("Snapshot")
    }
}

task publishReleases{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenRepository).matching{
        e->!e.getName().contains("Snapshot")
    }
}
