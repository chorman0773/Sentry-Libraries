import java.time.Instant

plugins {
    id 'maven-publish'
    id 'org.javamodularity.moduleplugin' version '1.6.0' apply false
}

subprojects{
    apply plugin: 'org.javamodularity.moduleplugin'
    repositories {
        mavenLocal()
        maven {
            url = "https://lightningcreations.github.io/Maven"
            name = "Lightning Creations Maven"
        }
        jcenter()
        mavenCentral()
    }
}

group 'github.chorman0773.sentry'
version '1.1'


def docOut = project.file('doc');

def docProjects = [
        "core",
        "launch",
        "launcher-control"
]


task 'allDoc'(type: Javadoc){
    for(String proj:docProjects) {
        source = source.plus(project.findProject(proj).sourceSets.main.allJava) as FileTree
    }
}

task 'allDocJar'(type: Jar){
    from allDoc
    archiveBaseName = 'all-javadoc'
    archiveVersion = project.version
}

task 'docs'(type: Copy){
    from allDoc
    into project.file('docs/api')
}

repositories {
    mavenLocal()
    maven {
        url = "https://lightningcreations.github.io/Maven"
        name = "Lightning Creations Maven"
    }
    jcenter()
    mavenCentral()
}

publishing {
    repositories {
        maven {
            def home = System.getProperty("user.home")
            url = "$home/Maven"
            name = "LightningCreations"
        }
    }
    publications {
        docs(MavenPublication) {
            artifact allDocJar
        }
        docsSnapshot(MavenPublication) {
            artifact allDocJar
            version = project.version+"-SNAPSHOT-"+ Instant.now().toString()
        }
    }
}

task publishSnapshotsToLocal{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenLocal).matching {
        e->e.getName().contains("Snapshot")
    }
}

task publishSnapshots{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenRepository).matching{
        e->e.getName().contains("Snapshot")
    }
}

task publishReleasesToLocal{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenLocal).matching {
        e->!e.getName().contains("Snapshot")
    }
}

task publishReleases{
    group = 'publishing'
    dependsOn tasks.withType(PublishToMavenRepository).matching{
        e->!e.getName().contains("Snapshot")
    }
}
